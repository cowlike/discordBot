image : microsoft/dotnet:latest

stages:
  - build
  - deploy

before_script:
  - 'dotnet restore'
  ########
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$SSH_PRIVATE_KEY")

  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

build:
  stage: build
  cache:
    key: app
    paths:
      - DiscordBotFSharp/publish

  script:
    - 'dotnet build'
    - 'dotnet test UnitTests/UnitTests.fsproj'
    - 'dotnet publish -c release -r linux-x64 -o publish'
   
  only:
    - master

deploy_aws:
  stage: deploy
  environment:
    name: aws
  cache:
    key: app
    paths:
      - DiscordBotFSharp/publish
    policy: pull

  script:
    - ssh ${USER}@${IP} '( killall DiscordBotFSharp; echo "stopped" )'
    - scp -r DiscordBotFSharp/publish/ ${USER}@${IP}:/opt/bot
    - ssh ${USER}@${IP} /home/${USER}/runbot.sh "$BOT_TOKEN"

  only:
    - master

deploy_azure:
  stage: deploy
  environment:
    name: azure
  cache:
    key: app
    paths:
      - DiscordBotFSharp/publish
    policy: pull

  script:
    - ssh ${USER_AZURE}@${IP_AZURE} '( killall DiscordBotFSharp; echo "stopped" )'
    - scp -r DiscordBotFSharp/publish/ ${USER_AZURE}@${IP_AZURE}:/opt/bot
    - ssh ${USER_AZURE}@${IP_AZURE} /home/${USER_AZURE}/runbot.sh "$BOT_TOKEN_AZURE"

  only:
    - master

